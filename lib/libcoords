-- Library to manage coordinates
--

travellingAlt = 100 -- to be changed to 160

function setHome(v)
    if not fs.exists("/var/") then
        fs.makeDir("/var/")
    end
    if not fs.exists("/var/coords") then
        fs.makeDir("/var/coords")
    end
    setCoords(v, "/var/coords/home")
    setCoords(v, "/var/coords/current")
end

function setCoords(v, file)
    if v ~= nil then
        local home = fs.open(file, "w")

        if home then
            home.writeLine(v[1])
            home.writeLine(v[2])
            home.writeLine(v[3])

            home.close()
        else
            print("Failed to open " .. file)
            error()
        end
    else 
        print("Set home argument empty")
    end
end

function getHome()
    return getCoords("/var/coords/home")
end

function getCoords(file)
    if fs.exists(file) then
        local home = fs.open(file, "r")

        local v = {0, 0, 0}
        if home then
            v[1] = home.readLine()
            v[2] = home.readLine()
            v[3] = home.readLine()

            home.close()
        else
            print("Failed to open " .. file)
            error()
        end

        return v
    else
        return nil
    end
end

function setOrientation(value)
    -- 1 north
    -- 2 east
    -- 3 south
    -- 4 west

    if not fs.exists("/var/") then
        fs.makeDir("/var/")
    end
    if not fs.exists("/var/coords") then
        fs.makeDir("/var/coords")
    end

    local orientation = fs.open("/var/coords/orientation", "w")

    if orientation then
        orientation.writeLine(value)
        orientation.close()
    else
        print("Failed to open /var/coords/home")
        error()
    end
end


function getOrientation()
    -- 1 north
    -- 2 east
    -- 3 south
    -- 4 west

    if fs.exists("/var/coords/orientation") then
        local orientation = fs.open("/var/coords/orientation", "r")

        if orientation then
            orientation.readLine()
            orientation.close()
            return orientation
        else
            return nil
        end
    end
end

function getCurrentCoords() 
    return getCoords("/var/coords/current")
end

function setCurrentCoords(v)
    setCoords(v, "/var/coords/current")
end

function forward()
    -- 1 north is -y
    -- 2 east is +x
    -- 3 south is +y
    -- 4 west is -x
    if turtle.forward() then
        local c = getCurrentCoords()
        local o = getOrientation()
        if orientation == 1 then
            c[2] = c[2] - 1
        elseif orientation == 2 then
            c[1] = c[1] + 1
        elseif orientation ==  3 then
            c[2] = c[2] + 1
        elseif orientation == 4 then
            c[1] = c[1] - 1
        else 
            print("Orientation is not 1, 2, 3 or 4!")
            error()
        end

        setCurrentCoords(c)
    end
end

function up()
    if turtle.up() then
        local c = getCurrentCoords()
        c[3] = c[3] + 1
        setCurrentCoords(c)
    end
end

function down()
    local res = turtle.down()
    if res then
        local c = getCurrentCoords()
        c[3] = c[3] - 1
        setCurrentCoords(c)
    end
     
    return res
end

function takeoff(alt)
while getCurrentCoords()[3] < alt do
        up()
    end
end

function land(alt)
    while down() do
    end
end

-- vim:set ft=lua: 
